// Generated by CoffeeScript 1.6.1
(function() {
  var Attribute;

  window.auditor = {};

  Attribute = (function() {

    function Attribute(name, values) {
      this.name = name;
      this.values = values;
    }

    return Attribute;

  })();

  window.auditor.atBottom = function(elem) {
    return (elem[0].scrollHeight - elem.scrollTop()) === elem.innerHeight();
  };

  window.auditor.updateRow = function(row, event) {
    return row.find('td').each(function(idx, elem) {
      var td;
      td = $(elem);
      if (td.hasClass("event-expander")) {
        td.find("a").attr("data-target", "#toggle-details-" + event.id);
      }
      if (td.hasClass("event-summary")) {
        td.html(event.summary || "");
      }
      if (td.hasClass("event-user")) {
        td.html(event.user || "");
      }
      if (td.hasClass("event-tags")) {
        td.html(event.tags || "");
      }
      if (td.hasClass("event-level")) {
        td.html(event.level || "");
      }
      if (td.hasClass("event-start")) {
        if (event.start) {
          td.html(moment(event.start).format());
        } else {
          td.html("");
        }
      }
      if (td.hasClass("event-end")) {
        if (event.end) {
          return td.html(moment(event.end).format());
        } else {
          return td.html("");
        }
      }
    });
  };

  window.auditor.addAttribute = function(data) {
    var elem;
    elem = $("#event-attributes-" + data.event_id);
    if (elem.hasClass("no-attributes")) {
      elem.html("");
      elem.removeClass("no-attributes");
    }
    return $.each(data.data, function(key, value) {
      var span;
      span = elem.find("span#attribute-" + data.event_id + "-" + key);
      if (!span.length) {
        elem.append("<div><b>" + key + ":</b> <span id='attribute-" + data.event_id + "-" + key + "'></span></div>");
      }
      span = elem.find("span#attribute-" + data.event_id + "-" + key);
      if (data.op_type === "append") {
        if (!!span.html().length) {
          span.append(", ");
        }
        return span.append(value);
      } else {
        return span.html(value);
      }
    });
  };

  Handlebars.registerHelper('ifEmpty', function(context, options) {
    if ($.isEmptyObject(context)) {
      return options.fn(this);
    }
    return options.inverse(this);
  });

  Handlebars.registerHelper('first', function(context, options) {
    if (context === 0) {
      return options.fn(this);
    }
  });

}).call(this);
